# docker-compose -f docker-compose.staging.yml up -d
# docker-compose -f docker-compose.staging.yml exec postgres psql -U postgres
# docker-compose -f docker-compose.staging.yml exec api sh
version: "3.7"

volumes:
  postgres_data: ~
  api_sock: ~

x-base-image: &base-image
  image: standup-slack-bot:latest
  build:
    dockerfile: deploy/Dockerfile
    context: .

services:
  nginx:
    build:
      dockerfile: deploy/nginx.Dockerfile
      context: .
    ports:
      - "3000:3000"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
      - api_sock:/tmp/api

  ui:
    image: standup-slack-bot-ui:latest
    build:
      dockerfile: deploy/Dockerfile
      context: frontend

  api:
    <<: *base-image
    command: ["server:run", "--port=/tmp/node.sock", "--env=prod"]
    user: 1000:1000
    depends_on:
      - postgres
      - redis
    volumes:
      - api_sock:/tmp
      - ./var:/opt/app/var

  standup-notifier:
    <<: *base-image
    command: ["standup:notify", "--env=prod"]
    user: 1000:1000
    #environment:
    #  - DEBUG=true
    depends_on:
      - postgres
      - redis
    volumes:
      - ./var:/opt/app/var

  queue-consumer:
    <<: *base-image
    command: ["queue:consume", "--env=prod"]
    user: 1000:1000
    #environment:
    #  - DEBUG=true
    depends_on:
      - postgres
      - redis
    volumes:
      - ./var:/opt/app/var

  postgres:
    image: postgres:13.4-alpine
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6.2.3-alpine
