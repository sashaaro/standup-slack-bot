extends layout/authorized_main

block authorized_content
    .ui.grid
        .alert.alert--gray.deactivate-bot-block
            div
                | Deactivate bot for
                a(href='https://' + user.team.domain + '.slack.com/messages/' + channel.id + '/details' target="blank")= " #" + channel.name
                |  channel
            code
                span= "/kick "
                a= "@daily_standup"

        form.ui.form.two.column.large.screen.only.row#form(method='post', v-on:submit="submit")
            .column.ui
                h3.ui.header= "Stan-up settings"
                .field(class=errors.timezone && errors.timezone.length ? 'error' : '')
                    label
                        span= 'Locale timezone'
                        span.error= errors.timezone && errors.timezone.length ? errors.timezone[0] : ''
                    select.ui.large.dropdown.search.form-control(name="timezone")
                        each timezone, index in timezones
                            - var selected = formData.timezone == timezone.id
                            option(value=timezone.id, selected=selected)= timezone.friendlyLabel
                .ui.fields.two
                    .field(class=errors.start && errors.start.length ? 'error' : '')
                        label
                            span= 'Start meeting (locale time)'
                            span.error= errors.start && errors.start.length ? errors.start[0] : ''
                        .ui.input.large
                            input.form-control(name="start", type="time", step="60", value=formData.start)
                    .field(class=errors.duration ? 'error' : '')
                        label
                            span= 'Duration'
                            span.error= errors.duration ? errors.duration[0] : ''
                        .ui.right.labeled.input.large
                            input.form-control(name="duration", type="number", step="1", value= formData.duration)
                            .ui.basic.label= "minutes"
                .field
                    label= 'Days'
                    div
                        each weekDay in weekDays
                            .ui.checkbox
                                input(type="checkbox")
                                label= weekDay
                button.ui.large.button.fluid.positive(type="submit", v-bind:disabled="questions.length === 0 || submitting", v-bind:class="{loading: submitting}")
                    i.save.icon
                    | Save settings
            .column
                h3.ui.header= "Questions"
                draggable(:list="questions", v-bind="dragOptions", handle=".icon.movable")
                    .field(v-for="(question, index) in questions", v-bind:class="{ error: errors[index] && errors[index].text }")
                        label
                            span= "#{{ index + 1 }}"
                            span.error= "{{ errors[index] && errors[index].text ? errors[index].text[0] : '' }} {{ errors[index] }}"
                        .movable-input
                            div
                                input(type="hidden", v-if="question.id", v-bind:name="'questions[' + index + '][id]'", v-model="question.id")
                                .ui.action.left.icon.input.large
                                    i.icon.arrows.alternate.vertical.link.movable
                                    input.form-control(type="text", v-bind:name="'questions[' + index + '][text]'", v-model="question.text", required, minlength=2)
                                    .ui.icon.button.positive(v-on:click="addPredefinedAnswer(question)")
                                        i.add.icon
                                    .ui.icon.button(v-on:click="remove(question)")
                                        i.trash.icon
                            .defined-responses
                                div(v-for="(predefinedAnswer, answerIndex) in question.predefinedAnswers")
                                    label(v-bind:class="{ error: errors[index] && errors[index].predefinedAnswers && errors[index].predefinedAnswers[answerIndex].text.length }")
                                        span= "#{{ answerIndex }}"
                                        span.error= "{{ errors[index] && errors[index].predefinedAnswers && errors[index].predefinedAnswers[answerIndex].text[0] }}"
                                    .ui.input.action.mini
                                        input.form-control(type="hidden", v-if="predefinedAnswer.id", v-bind:name="'questions[' + index + '][predefinedAnswers][' + answerIndex + '][id]'", v-model="predefinedAnswer.id", required, minlength=2)
                                        input.form-control(type="text", v-bind:name="'questions[' + index + '][predefinedAnswers][' + answerIndex + '][text]'", v-model="predefinedAnswer.text", required, minlength=2)
                                        .ui.icon.button(v-on:click="removePredefinedAnswer(question.predefinedAnswers, answerIndex)")
                                            i.trash.icon
                                    .ui.checkbox
                                        input(type="checkbox", v-model="predefinedAnswer.isSame")
                                        label= "It's not same question. reset statistics"
                    div
                .field
                    label &nbsp
                    a.ui.large.button.blue.fluid(href="#", v-on:click="add")
                        i.add.icon
                        | Add question
                if errors.questions
                    each err in errors.questions
                        div= err

block append scripts
    script.
        var vm = new Vue({
            el: '#form',
            data: {
                questions: !{JSON.stringify(formData.questions)},
                errors: !{JSON.stringify(errors.questions ? errors.questions : {})},
                dragOptions: {
                    animation: 200,
                },
                submitting: false
            },
            mounted: function () {
                this.originalValue = this.questions;
            },
            methods: {
                removePredefinedAnswer(predefinedAnswers, answerIndex) {
                    predefinedAnswers.splice(answerIndex, 1)
                },
                addPredefinedAnswer(question) {
                    question.predefinedAnswers.push({})
                },
                submit() {
                    this.submitting = true;
                },
                add(e) {
                    e.preventDefault();
                    this.questions.push({text: "", predefinedAnswers: []})
                },
                remove(question) {
                    this.questions.splice(this.questions.indexOf(question), 1)
                }
            }
        })
        $('select.dropdown.search').dropdown({fullTextSearch: true});
