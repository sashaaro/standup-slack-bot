extends ../layout/authorized_main

block authorized_content
  .ui.grid
    if channel
      .alert.alert--gray.deactivate-bot-block
        div
          | Deactivate bot for
          a(href='https://' + user.team.domain + '.slack.com/messages/' + channel.id + '/details' target="blank")= " #" + channel.name
          |  channel
        code
          span= "/kick "
          a= "@daily_standup"

    form.ui.form.two.column.large.screen.only.row#form(method='post', v-on:submit="submit")
      .column.ui
        h3.ui.header= "Stan-up settings"
        .field(class=errors.name ? 'error' : '')
          label
            span= 'Name'
            span.error= errors.name ? errors.name[0] : ''
          .ui.input.large
            input.form-control(name="name", type="text", value= formData.name)
        .field(class=errors.timezone && errors.timezone.length ? 'error' : '')
          label
            span= 'Locale timezone'
            span.error= errors.timezone && errors.timezone.length ? errors.timezone[0] : ''
          select.ui.large.dropdown.search.form-control(name="timezone")
            each timezone, index in timezones
              - var selected = formData.timezone == timezone.id
              option(value=timezone.id, selected=selected)= timezone.friendlyLabel
        .ui.fields.two
          .field(class=errors.start && errors.start.length ? 'error' : '')
            label
              span= 'Start meeting (locale time)'
              span.error= errors.start && errors.start.length ? errors.start[0] : ''
            .ui.input.large
              input.form-control(name="start", type="time", step="60", value=formData.start)
          .field(class=errors.duration ? 'error' : '')
            label
              span= 'Duration'
              span.error= errors.duration ? errors.duration[0] : ''
            .ui.right.labeled.input.large
              input.form-control(name="duration", type="number", step="1", value= formData.duration)
              .ui.basic.label= "minutes"
        //.field
          label= 'Days'
          div
            each weekDay in weekDays
              .ui.checkbox
                input(type="checkbox")
                label= weekDay
        .field(class=errors.receivers ? 'error' : '')
          label
            span= 'Participants'
            span.error= errors.receivers ? errors.receivers[0] : ''
          .ui.input.large
            select.dropdown.search.ui.fluid(name="receivers[]", placeholder="Select receivers", multiple)
              each u in users
                option(value=u.id, selected=formData.receivers.includes(u.id))
                  img(src= u.profile.image_32)
                  div= u.name
        .field(class=errors.reportSlackChannel ? 'error' : '')
          label
            span= 'Report channel'
            span.error= errors.reportSlackChannel ? errors.reportSlackChannel[0] : ''
          .ui.input.large
            select.dropdown.search.ui.fluid(name="reportSlackChannel", placeholder="Select channel")
              each u in channels
                option(value=u.id, selected=formData.reportSlackChannel === u.id)= u.name
        button.ui.large.button.fluid.positive(type="submit", v-bind:disabled="questions.length === 0 || submitting", v-bind:class="{loading: submitting}")
          i.save.icon
          | Save
      .column
        h3.ui.header &nbsp
        div
          .field
            label
              span= "Questions"
        draggable(:list="questions", v-bind="dragOptions", handle=".icon.movable")
          .field(v-for="(question, index) in questions", v-bind:class="{ error: errors[index] && errors[index].text }")
            label
              span.error= "{{ errors[index] && errors[index].text ? errors[index].text[0] : '' }} {{ errors[index] }}"
            .movable-input
              div
                input(type="hidden", v-if="question.id", v-bind:name="'questions[' + index + '][id]'", v-model="question.id")
                .ui.action.left.icon.input.large
                  i.icon.arrows.alternate.vertical.link.movable
                  input.form-control(type="text", v-bind:name="'questions[' + index + '][text]'", v-model="question.text", required, minlength=2)
                  .ui.icon.button.teal(title="Add options", v-if="question.options.length === 0", v-on:click="addOption(question)")
                    i.list.ol.icon
                  .ui.icon.button(v-on:click="remove(question)")
                    i.trash.icon
              .question-options(v-if="question.options.length > 0")
                div(v-for="(questionOption, optionIndex) in question.options")
                  label(v-bind:class="{ error: errors[index] && errors[index].options && errors[index].options[optionIndex].text.length }")
                    span.error= "{{ errors[index] && errors[index].options && errors[index].options[optionIndex].text[0] }}"
                  .ui.input.action.mini
                    input.form-control(type="hidden", v-if="questionOption.id", v-bind:name="'questions[' + index + '][options][' + optionIndex + '][id]'", v-model="questionOption.id", required, minlength=2)
                    input.form-control(type="text", v-bind:name="'questions[' + index + '][options][' + optionIndex + '][text]'", v-model="questionOption.text", required, minlength=2)
                    .ui.icon.button(v-on:click="removeOption(question.options, optionIndex)")
                      i.trash.icon
                  .ui.checkbox(v-if="questionOption.id && isChanged(questionOption)")
                    input(type="checkbox", v-bind:name="'questions[' + index + '][options][' + optionIndex + '][isNew]'", v-model="questionOption.isNew")
                    label= "It is new question"
                div
                  button.mini.ui.button.teal.fluid(v-on:click="addOption(question)")
                    i.add.icon
                    | Add option
          div
        .field
          label &nbsp
          a.ui.large.button.blue.fluid(href="#", v-on:click="add")
            i.add.icon
            | Add question
        if errors.questions
          each err in errors.questions
            div= err


  .ui.search
    input.prompt(type="text")
    .results

  #app
    autocomplete(:search="search", placeholder="Search for a country", aria-label="Search for a country", @submit="handleSubmit")

  script(src="https://unpkg.com/@trevoreyre/autocomplete-vue")

block append scripts
  script.
    const formErrors = !{JSON.stringify(errors.questions || {})};
    const resetFormQuestionData = !{JSON.stringify(formData.questions || [])}
    const formQuestionData = !{JSON.stringify(formData.questions || [])}

    var vm = new Vue({
      el: '#form',
      data: {
        questions: formQuestionData,
        errors: formErrors,
        dragOptions: {
          animation: 200,
        },
        submitting: false
      },
      methods: {
        add(e) {
          e.preventDefault();
          this.questions.push({text: "", options: []})
        },
        remove(question) {
          this.questions.splice(this.questions.indexOf(question), 1)
        },
        addOption(question) {
          question.options.push({})
        },
        removeOption(options, optionIndex) {
          options.splice(optionIndex, 1)
        },
        isChanged(questionOption) {
          const foundOption = [].concat(...resetFormQuestionData.map(q => q.options)).find(o => o.id === questionOption.id);
          return foundOption && foundOption.text !== questionOption.text;
        },
        submit() {
          this.submitting = true;
        },
      }
    })
    $('select.dropdown.search').dropdown({fullTextSearch: true});

    $('.ui.search')
      .search({
        apiSettings: {
          url: '//api.github.com/search/repositories?q={query}'
        },
        fields: {
          results: 'items',
          title: 'name',
        },
        minCharacters: 3
      })
    ;

    const countries = ['Russia', 'Belorus']

    new Vue({
      el: '#app',
      components: {
        Autocomplete
      },
      methods: {
        search(input) {
          if (input.length < 1) {
            return []
          }
          return countries.filter(country => {
            return country.toLowerCase()
                    .startsWith(input.toLowerCase())
          })
        },
        handleSubmit(results, selectedIndex) {
          console.log(`${results.length} results`)
          if (selectedIndex > -1) {
            console.log(`Selected: ${results[selectedIndex]}`)
          }
        }
      }
    })